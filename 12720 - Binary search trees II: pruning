#include <stdio.h>
#include <stdlib.h>
typedef struct Node{
    struct Node* L;
    struct Node* R;
    int id;
}node;
int doo(node* node){
    if(node->L==NULL&&node->R==NULL){
        node->id = -1;
        return 2;
    }
    int Llev = 0;
    int Rlev = 0;
    if(node->L!=NULL) Llev = doo(node->L);
    if(node->R!=NULL) Rlev = doo(node->R);
    int leve = Llev>Rlev?Llev:Rlev;
    //printf("node%dleve is %d\n",node->id,leve);
    node->id = leve * -1;
    return leve+1;
    
}
void finder(node* node,int L,int R){
    //printf("node = %d L = %d R = %d\n",node->id,L,R);
    if(node->id<L || node->id>R){
        doo(node);
        //printf("find error\n");
        return;
    }
    if(node->L==NULL && node->R==NULL){
        //printf("fuck");
        return;
    }
    if(node->R!=NULL){
        finder(node->R, node->id, R);
    }
    if(node->L!=NULL){
        finder(node->L, L, node->id);
    }
}

int main(){
    int n;
    scanf("%d",&n);
    
    node* tree = (node*)malloc(sizeof(node)*(n+1));
    for(int i=1;i<=n;i++){
        int num;
        scanf("%d",&num);
        tree[i].id = num;
        tree[i].L = NULL;
        tree[i].R = NULL;
    }
    node* head = NULL;
    for(int i=1;i<=n;i++){
        int z;
        scanf("%d",&z);
        if(z==0){
            head = &tree[i];
        }
        if(z!=0){
            char p;
            scanf(" %c",&p);
            if(p=='R'){
                tree[z].R = &tree[i];
                //printf("r\n");
            }
            else if(p=='L'){
                tree[z].L = &tree[i];
                //printf("l\n");
            }
        }
    }
    finder(head, -214700000, 214700000);
    for(int i=1;i<=n;i++){
        //printf("node%d=",i);
        printf("%d",tree[i].id);
        if(i!=n)printf(" ");
    }
    printf("\n");
    
    return 0;
}
